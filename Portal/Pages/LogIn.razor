@using Portal.Models
@using Portal.Authentication
@page "/login"
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavManager

<h3>Log In</h3>

@if (showAuthenticationError)
{
    <div class="alert alert-danger" role="alert">
        <p>@authenticationErrorText</p>
    </div>
}

<EditForm Model="model" OnValidSubmit="ExecuteLogin" class="">

    <div class="form-row">
        <div class="col-auto">
            <label for="email" class="sr-only">Email</label>
            <InputText id="email" class="form-control" @bind-Value="model.Email" placeHolder="Email Address"/>
            @*<ValidationMessage For="@(() => model.Email)"/>*@
        </div>

        <div class="col-auto">
            <label for="password" class="sr-only">Password</label>
            <InputText type="password" id="password" class="form-control" @bind-Value="model.Password" placeHolder="Password"/>
            @*<ValidationMessage For="@(() => model.Password)"/>*@
        </div>

        <div class="col-auto" text-right>
            <button type="submit" class="btn btn-success">Log In</button>
        </div>

        <div class="col-auto" text-right>
            <button type="button" class="btn btn-primary" @onclick="RegisterUser">Register</button>
        </div>
    </div>
</EditForm>

@code {
    private AuthenticationUserModel model = new();

    private bool showAuthenticationError = false;
    private string authenticationErrorText = "";

    private void RegisterUser()
    {
        NavManager.NavigateTo("/register");
    }

    private async Task ExecuteLogin()
    {
        showAuthenticationError = false;

        var result = await AuthenticationService.Login(model);

        if (result is not null)
        {
            NavManager.NavigateTo("/");
        }
        else
        {
            authenticationErrorText = "There was an error when trying to log in.";
            showAuthenticationError = true;
        }
    }
}
